apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: 'org.jetbrains.kotlin.android'

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

def reactNativeRoot = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath()

def getVersionCode() {
    return 1
}

def getVersionName() {
    return "1.0.0"
}

react {
    root = file("../")
    reactNativeDir = file("../../node_modules/react-native")
    codegenDir = file("../../node_modules/react-native-codegen")
}

android {
    ndkVersion ndkVersion
    compileSdkVersion compileSdkVersion

    namespace "com.cleanslate"
    defaultConfig {
        applicationId "com.cleanslate"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getVersionCode()
        versionName getVersionName()
        multiDexEnabled true
        
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    splits {
        abi {
            reset()
            enable false
            universalApk true
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('CLEANSLATE_UPLOAD_STORE_FILE')) {
                storeFile file(CLEANSLATE_UPLOAD_STORE_FILE)
                storePassword CLEANSLATE_UPLOAD_STORE_PASSWORD
                keyAlias CLEANSLATE_UPLOAD_KEY_ALIAS
                keyPassword CLEANSLATE_UPLOAD_KEY_PASSWORD
            }
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace(".apk", "-${variant.versionName}.apk")
                output.outputFileName = fileName
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation 'com.android.support:animated-vector-drawable:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.core:core-ktx:1.17.0'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-engine:+")
    } else {
        implementation("org.webkit:android-jsc:+")
    }
}
